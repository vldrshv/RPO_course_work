/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmstu.geofence.manager.core.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.bmstu.geofence.manager.core.model.Geozone;
import com.bmstu.geofence.manager.core.model.GeozoneModel;
import com.bmstu.geofence.manager.core.model.GeozoneSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Geozone service. Represents a row in the &quot;GM_Geozone&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GeozoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeozoneImpl}.
 * </p>
 *
 * @author Ershov
 * @see GeozoneImpl
 * @see Geozone
 * @see GeozoneModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GeozoneModelImpl extends BaseModelImpl<Geozone>
	implements GeozoneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a geozone model instance should use the {@link Geozone} interface instead.
	 */
	public static final String TABLE_NAME = "GM_Geozone";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "geozoneId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "area", Types.VARCHAR },
			{ "calendarId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "geozoneAttributes", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("geozoneId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("area", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("calendarId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("geozoneAttributes", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table GM_Geozone (uuid_ VARCHAR(75) null,geozoneId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name VARCHAR(75) null,area VARCHAR(75) null,calendarId LONG,description VARCHAR(75) null,geozoneAttributes VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GM_Geozone";
	public static final String ORDER_BY_JPQL = " ORDER BY geozone.geozoneId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GM_Geozone.geozoneId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.bmstu.geofence.manager.core.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bmstu.geofence.manager.core.model.Geozone"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.bmstu.geofence.manager.core.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bmstu.geofence.manager.core.model.Geozone"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.bmstu.geofence.manager.core.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bmstu.geofence.manager.core.model.Geozone"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GEOZONEID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Geozone toModel(GeozoneSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Geozone model = new GeozoneImpl();

		model.setUuid(soapModel.getUuid());
		model.setGeozoneId(soapModel.getGeozoneId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setName(soapModel.getName());
		model.setArea(soapModel.getArea());
		model.setCalendarId(soapModel.getCalendarId());
		model.setDescription(soapModel.getDescription());
		model.setGeozoneAttributes(soapModel.getGeozoneAttributes());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Geozone> toModels(GeozoneSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Geozone> models = new ArrayList<Geozone>(soapModels.length);

		for (GeozoneSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.bmstu.geofence.manager.core.service.util.ServiceProps.get(
				"lock.expiration.time.com.bmstu.geofence.manager.core.model.Geozone"));

	public GeozoneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _geozoneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGeozoneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _geozoneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Geozone.class;
	}

	@Override
	public String getModelClassName() {
		return Geozone.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("geozoneId", getGeozoneId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("name", getName());
		attributes.put("area", getArea());
		attributes.put("calendarId", getCalendarId());
		attributes.put("description", getDescription());
		attributes.put("geozoneAttributes", getGeozoneAttributes());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long geozoneId = (Long)attributes.get("geozoneId");

		if (geozoneId != null) {
			setGeozoneId(geozoneId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String area = (String)attributes.get("area");

		if (area != null) {
			setArea(area);
		}

		Long calendarId = (Long)attributes.get("calendarId");

		if (calendarId != null) {
			setCalendarId(calendarId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String geozoneAttributes = (String)attributes.get("geozoneAttributes");

		if (geozoneAttributes != null) {
			setGeozoneAttributes(geozoneAttributes);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getGeozoneId() {
		return _geozoneId;
	}

	@Override
	public void setGeozoneId(long geozoneId) {
		_columnBitmask |= GEOZONEID_COLUMN_BITMASK;

		if (!_setOriginalGeozoneId) {
			_setOriginalGeozoneId = true;

			_originalGeozoneId = _geozoneId;
		}

		_geozoneId = geozoneId;
	}

	public long getOriginalGeozoneId() {
		return _originalGeozoneId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getArea() {
		if (_area == null) {
			return StringPool.BLANK;
		}
		else {
			return _area;
		}
	}

	@Override
	public void setArea(String area) {
		_area = area;
	}

	@JSON
	@Override
	public long getCalendarId() {
		return _calendarId;
	}

	@Override
	public void setCalendarId(long calendarId) {
		_calendarId = calendarId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getGeozoneAttributes() {
		if (_geozoneAttributes == null) {
			return StringPool.BLANK;
		}
		else {
			return _geozoneAttributes;
		}
	}

	@Override
	public void setGeozoneAttributes(String geozoneAttributes) {
		_geozoneAttributes = geozoneAttributes;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Geozone.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Geozone.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Geozone toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Geozone)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeozoneImpl geozoneImpl = new GeozoneImpl();

		geozoneImpl.setUuid(getUuid());
		geozoneImpl.setGeozoneId(getGeozoneId());
		geozoneImpl.setGroupId(getGroupId());
		geozoneImpl.setCompanyId(getCompanyId());
		geozoneImpl.setUserId(getUserId());
		geozoneImpl.setUserName(getUserName());
		geozoneImpl.setCreateDate(getCreateDate());
		geozoneImpl.setModifiedDate(getModifiedDate());
		geozoneImpl.setStatus(getStatus());
		geozoneImpl.setStatusByUserId(getStatusByUserId());
		geozoneImpl.setStatusByUserName(getStatusByUserName());
		geozoneImpl.setStatusDate(getStatusDate());
		geozoneImpl.setName(getName());
		geozoneImpl.setArea(getArea());
		geozoneImpl.setCalendarId(getCalendarId());
		geozoneImpl.setDescription(getDescription());
		geozoneImpl.setGeozoneAttributes(getGeozoneAttributes());

		geozoneImpl.resetOriginalValues();

		return geozoneImpl;
	}

	@Override
	public int compareTo(Geozone geozone) {
		long primaryKey = geozone.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Geozone)) {
			return false;
		}

		Geozone geozone = (Geozone)obj;

		long primaryKey = geozone.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GeozoneModelImpl geozoneModelImpl = this;

		geozoneModelImpl._originalUuid = geozoneModelImpl._uuid;

		geozoneModelImpl._originalGeozoneId = geozoneModelImpl._geozoneId;

		geozoneModelImpl._setOriginalGeozoneId = false;

		geozoneModelImpl._originalGroupId = geozoneModelImpl._groupId;

		geozoneModelImpl._setOriginalGroupId = false;

		geozoneModelImpl._originalCompanyId = geozoneModelImpl._companyId;

		geozoneModelImpl._setOriginalCompanyId = false;

		geozoneModelImpl._setModifiedDate = false;

		geozoneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Geozone> toCacheModel() {
		GeozoneCacheModel geozoneCacheModel = new GeozoneCacheModel();

		geozoneCacheModel.uuid = getUuid();

		String uuid = geozoneCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			geozoneCacheModel.uuid = null;
		}

		geozoneCacheModel.geozoneId = getGeozoneId();

		geozoneCacheModel.groupId = getGroupId();

		geozoneCacheModel.companyId = getCompanyId();

		geozoneCacheModel.userId = getUserId();

		geozoneCacheModel.userName = getUserName();

		String userName = geozoneCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			geozoneCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			geozoneCacheModel.createDate = createDate.getTime();
		}
		else {
			geozoneCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			geozoneCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			geozoneCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		geozoneCacheModel.status = getStatus();

		geozoneCacheModel.statusByUserId = getStatusByUserId();

		geozoneCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = geozoneCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			geozoneCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			geozoneCacheModel.statusDate = statusDate.getTime();
		}
		else {
			geozoneCacheModel.statusDate = Long.MIN_VALUE;
		}

		geozoneCacheModel.name = getName();

		String name = geozoneCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			geozoneCacheModel.name = null;
		}

		geozoneCacheModel.area = getArea();

		String area = geozoneCacheModel.area;

		if ((area != null) && (area.length() == 0)) {
			geozoneCacheModel.area = null;
		}

		geozoneCacheModel.calendarId = getCalendarId();

		geozoneCacheModel.description = getDescription();

		String description = geozoneCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			geozoneCacheModel.description = null;
		}

		geozoneCacheModel.geozoneAttributes = getGeozoneAttributes();

		String geozoneAttributes = geozoneCacheModel.geozoneAttributes;

		if ((geozoneAttributes != null) && (geozoneAttributes.length() == 0)) {
			geozoneCacheModel.geozoneAttributes = null;
		}

		return geozoneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", geozoneId=");
		sb.append(getGeozoneId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", area=");
		sb.append(getArea());
		sb.append(", calendarId=");
		sb.append(getCalendarId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", geozoneAttributes=");
		sb.append(getGeozoneAttributes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.bmstu.geofence.manager.core.model.Geozone");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geozoneId</column-name><column-value><![CDATA[");
		sb.append(getGeozoneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>area</column-name><column-value><![CDATA[");
		sb.append(getArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarId</column-name><column-value><![CDATA[");
		sb.append(getCalendarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>geozoneAttributes</column-name><column-value><![CDATA[");
		sb.append(getGeozoneAttributes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Geozone.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Geozone.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _geozoneId;
	private long _originalGeozoneId;
	private boolean _setOriginalGeozoneId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _area;
	private long _calendarId;
	private String _description;
	private String _geozoneAttributes;
	private long _columnBitmask;
	private Geozone _escapedModel;
}